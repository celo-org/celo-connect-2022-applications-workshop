/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type LogBid = ContractEventLog<{
  bidder: string;
  bid: string;
  highestBidder: string;
  highestBid: string;
  highestBindingBid: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type LogCanceled = ContractEventLog<{}>;
export type LogWithdrawal = ContractEventLog<{
  withdrawer: string;
  withdrawalAccount: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;

export interface Auction extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Auction;
  clone(): Auction;
  methods: {
    bidDuration(): NonPayableTransactionObject<string>;

    bidIncrement(): NonPayableTransactionObject<string>;

    canceled(): NonPayableTransactionObject<boolean>;

    endBlock(): NonPayableTransactionObject<string>;

    fundsByBidder(arg0: string): NonPayableTransactionObject<string>;

    highestBidder(): NonPayableTransactionObject<string>;

    highestBindingBid(): NonPayableTransactionObject<string>;

    imgUrl(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    startBlock(): NonPayableTransactionObject<string>;

    getHighestBid(): NonPayableTransactionObject<string>;

    placeBid(): PayableTransactionObject<boolean>;

    cancelAuction(): NonPayableTransactionObject<boolean>;

    withdraw(): NonPayableTransactionObject<boolean>;
  };
  events: {
    LogBid(cb?: Callback<LogBid>): EventEmitter;
    LogBid(options?: EventOptions, cb?: Callback<LogBid>): EventEmitter;

    LogCanceled(cb?: Callback<LogCanceled>): EventEmitter;
    LogCanceled(
      options?: EventOptions,
      cb?: Callback<LogCanceled>
    ): EventEmitter;

    LogWithdrawal(cb?: Callback<LogWithdrawal>): EventEmitter;
    LogWithdrawal(
      options?: EventOptions,
      cb?: Callback<LogWithdrawal>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "LogBid", cb: Callback<LogBid>): void;
  once(event: "LogBid", options: EventOptions, cb: Callback<LogBid>): void;

  once(event: "LogCanceled", cb: Callback<LogCanceled>): void;
  once(
    event: "LogCanceled",
    options: EventOptions,
    cb: Callback<LogCanceled>
  ): void;

  once(event: "LogWithdrawal", cb: Callback<LogWithdrawal>): void;
  once(
    event: "LogWithdrawal",
    options: EventOptions,
    cb: Callback<LogWithdrawal>
  ): void;
}
