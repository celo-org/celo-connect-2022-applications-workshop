/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AuctionCreated = ContractEventLog<{
  auctionContract: string;
  owner: string;
  numAuctions: string;
  allAuctions: string[];
  0: string;
  1: string;
  2: string;
  3: string[];
}>;

export interface AuctionFactory extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): AuctionFactory;
  clone(): AuctionFactory;
  methods: {
    auctions(arg0: number | string | BN): NonPayableTransactionObject<string>;

    createAuction(
      bidIncrement: number | string | BN,
      bidDuration: number | string | BN,
      imgUrl: string
    ): NonPayableTransactionObject<void>;

    allAuctions(): NonPayableTransactionObject<string[]>;
  };
  events: {
    AuctionCreated(cb?: Callback<AuctionCreated>): EventEmitter;
    AuctionCreated(
      options?: EventOptions,
      cb?: Callback<AuctionCreated>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AuctionCreated", cb: Callback<AuctionCreated>): void;
  once(
    event: "AuctionCreated",
    options: EventOptions,
    cb: Callback<AuctionCreated>
  ): void;
}
